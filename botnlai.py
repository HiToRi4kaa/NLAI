import telebot
import json
import logging

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –î–ª—è –∫—ñ–Ω–µ—á–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó –±–æ—Ç–∞ –≤–∏–º–∫–Ω–µ–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
telebot.logger.setLevel(logging.WARNING)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –±–æ—Ç–∞
bot = telebot.TeleBot('8064955635:AAHe78CWompJ-CQxoIOUQ_4OryhjeIkd6vw')

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
user_data = {}
playlists = []
PLAYLISTS_FILE = 'playlists.json'
MUSIC_FILE = 'music.json'

# –§—É–Ω–∫—Ü—ñ—ó
def load_music():
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –ø—Ä–æ –º—É–∑–∏–∫—É –∑ —Ñ–∞–π–ª—É.

    –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∏–Ω–∏–∫–∞—î –ø–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON, –ø–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ä–æ–∂–Ω—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É.

    Returns:
        dict: –î–∞–Ω—ñ –ø—Ä–æ –º—É–∑–∏–∫—É.
    """
    try:
        with open(MUSIC_FILE, 'r', encoding='utf-8') as file:
            return json.load(file)
    except FileNotFoundError:
        logging.warning("–§–∞–π–ª music.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–æ—Ä–æ–∂–Ω—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º—É–∑–∏–∫–∏.")
        return {}
    except json.JSONDecodeError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON: {e}. –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–æ—Ä–æ–∂–Ω—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º—É–∑–∏–∫–∏.")
        return {}

def save_music(music_data):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ –ø—Ä–æ –º—É–∑–∏–∫—É —É —Ñ–∞–π–ª.

    Args:
        music_data (dict): –î–∞–Ω—ñ –ø—Ä–æ –º—É–∑–∏–∫—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.
    """
    try:
        with open(MUSIC_FILE, 'w', encoding='utf-8') as file:
            json.dump(music_data, file, ensure_ascii=False, indent=4)
        logging.debug("–ú—É–∑–∏–∫–∞ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É —Ñ–∞–π–ª.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –º—É–∑–∏–∫–∏: {e}")

def load_playlists():
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø–ª–µ–π–ª–∏—Å—Ç–∏ –∑ —Ñ–∞–π–ª—É —É –≥–ª–æ–±–∞–ª—å–Ω—É –∑–º—ñ–Ω–Ω—É `playlists`.

    –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∏–Ω–∏–∫–∞—î –ø–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON, —Å—Ç–≤–æ—Ä—é—î –ø–æ—Ä–æ–∂–Ω—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
    """
    global playlists
    try:
        with open(PLAYLISTS_FILE, 'r', encoding='utf-8') as file:
            playlists = json.load(file)
            logging.debug(f"–ü–ª–µ–π–ª–∏—Å—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –∑ —Ñ–∞–π–ª—É: {playlists}")
    except FileNotFoundError:
        playlists = []
        logging.warning("–§–∞–π–ª playlists.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–æ—Ä–æ–∂–Ω—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤.")
    except json.JSONDecodeError as e:
        playlists = []
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON: {e}. –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–æ—Ä–æ–∂–Ω—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤.")

def save_playlists():
    """
    –ó–±–µ—Ä—ñ–≥–∞—î –ø–ª–µ–π–ª–∏—Å—Ç–∏ —É —Ñ–∞–π–ª.

    –Ø–∫—â–æ –≤–∏–Ω–∏–∫–∞—î –ø–æ–º–∏–ª–∫–∞, –∑–∞–ø–∏—Å—É—î —ó—ó —É –ª–æ–≥.
    """
    try:
        with open(PLAYLISTS_FILE, 'w', encoding='utf-8') as file:
            json.dump(playlists, file, ensure_ascii=False, indent=4)
        logging.debug("–ü–ª–µ–π–ª–∏—Å—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —É —Ñ–∞–π–ª.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤: {e}")

def get_user_playlists(user_id):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –ø–ª–µ–π–ª–∏—Å—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –π–æ–≥–æ ID.

    Args:
        user_id (int): ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

    Returns:
        dict: –°–ª–æ–≤–Ω–∏–∫ –∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    for user_data in playlists:
        if user_data.get("user_id") == user_id:
            return user_data.get("playlists", {})
    return {}

def update_user_playlists(user_id, updated_playlists):
    """
    –û–Ω–æ–≤–ª—é—î –ø–ª–µ–π–ª–∏—Å—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –≥–ª–æ–±–∞–ª—å–Ω—ñ–π –∑–º—ñ–Ω–Ω—ñ–π —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î —ó—Ö —É —Ñ–∞–π–ª.

    Args:
        user_id (int): ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        updated_playlists (dict): –û–Ω–æ–≤–ª–µ–Ω—ñ –ø–ª–µ–π–ª–∏—Å—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    for user_data in playlists:
        if user_data["user_id"] == user_id:
            user_data["playlists"] = updated_playlists
            save_playlists()
            return
    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –¥–æ–¥–∞—î–º–æ –Ω–æ–≤–æ–≥–æ
    playlists.append({"user_id": user_id, "playlists": updated_playlists})
    save_playlists()

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
music_data = load_music()
load_playlists()

#–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
@bot.message_handler(commands=['start'])
def send_welcome(message):
    """
    –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /start.

    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.

    Args:
        message (telebot.types.Message): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è —É False
    if message.chat.id in user_data:
        user_data[message.chat.id]['adding_music'] = False
        user_data[message.chat.id]['creating_playlist'] = False

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    markup = telebot.types.InlineKeyboardMarkup()
    music_button = telebot.types.InlineKeyboardButton("üéµ–ü–æ—á–∞—Ç–∏", callback_data='music')
    markup.row(music_button)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.send_message(
        message.chat.id,
        "üéµ <b>–ü—Ä–∏–≤—ñ—Ç!</b> –Ø ‚Äî —Ç–≤—ñ–π –º—É–∑–∏—á–Ω–∏–π –±–æ—Ç! üé∂\n\n"
        "–Ø –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ —Å–ª—É—Ö–∞—Ç–∏ —É–ª—é–±–ª–µ–Ω—É –º—É–∑–∏–∫—É, —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∏ —Ç–∞ –Ω–∞—Å–æ–ª–æ–¥–∂—É–≤–∞—Ç–∏—Å—è –∑–≤—É–∫–æ–º! üî•\n\n"
        "<i>–î–∞–≤–∞–π —Å–ª—É—Ö–∞—Ç–∏ –º—É–∑–∏–∫—É —Ä–∞–∑–æ–º!</i> üéß‚ú®",
        reply_markup=markup,
        parse_mode='HTML'
    )

@bot.message_handler(commands=['help'])
def send_help(message):
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –π–æ–≥–æ ID.

    Args:
        message (telebot.types.Message): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    bot.send_message(message.chat.id, f"–í–∞—à ID: {message.from_user.id}")  # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

@bot.message_handler(commands=['info'])
def send_info(message):
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–≤—Ç–æ—Ä–∞ –±–æ—Ç–∞.

    Args:
        message (telebot.types.Message): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    bot.send_message(
        message.chat.id,
        "<b>‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞:</b>\n\n"
        "üë®‚Äçüéì <b>–ê–≤—Ç–æ—Ä:</b> —Å—Ç—É–¥–µ–Ω—Ç <i>–ù–æ–≤–æ–∫–∞—Ö–æ–≤—Å—å–∫–æ–≥–æ —Ñ–∞—Ö–æ–≤–æ–≥–æ –∫–æ–ª–µ–¥–∂—É</i>\n"
        "üìö <b>–ì—Ä—É–ø–∞:</b> 12221\n"
        "‚úçÔ∏è <b>–Ü–º'—è:</b> –ú–∏–ª–ª—î—Ä –ú–∞–∫—Å–∏–º\n\n"
        "–î—è–∫—É—é, —â–æ –∫–æ—Ä–∏—Å—Ç—É—î—Ç–µ—Å—å –±–æ—Ç–æ–º! üòä",
        parse_mode='HTML'
    )

# --- Callback Query Handlers for Music ---
@bot.callback_query_handler(func=lambda call: call.data == 'music')
def music_menu(call):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –º–µ–Ω—é –º–æ–¥—É–ª—è "–ú—É–∑–∏–∫–∞".

    –í–∏–¥–∞–ª—è—î –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –ø–æ–∫–∞–∑—É—î –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –æ–ø—Ü—ñ–π.

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è —É False
    if call.message.chat.id in user_data:
        user_data[call.message.chat.id]['adding_music'] = False
        user_data[call.message.chat.id]['creating_playlist'] = False

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.delete_message(call.message.chat.id, call.message.message_id)

    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω—é
    markup = telebot.types.InlineKeyboardMarkup()
    music_button = telebot.types.InlineKeyboardButton("üé∂–ü—Ä–æ—Å–ª—É—Ö–∞—Ç–∏ –º—É–∑–∏–∫—É", callback_data='music_option')
    playlist_button = telebot.types.InlineKeyboardButton("üìÑ–ü–ª–µ–π–ª–∏—Å—Ç–∏", callback_data='playlist')
    tools_button = telebot.types.InlineKeyboardButton("‚öôÔ∏è–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏", callback_data='tools')
    add_music_button = telebot.types.InlineKeyboardButton("‚ûï–î–æ–¥–∞—Ç–∏ –º—É–∑–∏–∫—É", callback_data='add_music')
    markup.row(music_button, playlist_button)
    markup.row(tools_button, add_music_button)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.send_message(
        call.message.chat.id,
        "<b>üéµ –û–ø–∏—Å –∫–Ω–æ–ø–æ–∫:</b> \n\n"
        "<b>üé∂–ü—Ä–æ—Å–ª—É—Ö–∞—Ç–∏ –º—É–∑–∏–∫—É</b> ‚Äì –≤–∏–±—ñ—Ä —ñ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–µ–∫—ñ–≤.\n\n"
        "<b>üìÑ–ü–ª–µ–π–ª–∏—Å—Ç–∏</b> ‚Äì –ø–µ—Ä–µ–≥–ª—è–¥ —Ç–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏.\n\n"
        "<b>‚öôÔ∏è–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏</b> ‚Äì –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º—É–∑–∏–∫–∏ —á–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤.\n\n"
        "<b>‚ûï–î–æ–¥–∞—Ç–∏ –º—É–∑–∏–∫—É</b> ‚Äì –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ç—Ä–µ–∫—ñ–≤.",
        reply_markup=markup,
        parse_mode='HTML'
    )

@bot.callback_query_handler(func=lambda call: call.data == 'add_music')
def handle_add_music(call):
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–î–æ–¥–∞—Ç–∏ –º—É–∑–∏–∫—É".

    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º—É–∑–∏–∫–∏.

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.answer_callback_query(call.id)

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    markup = telebot.types.InlineKeyboardMarkup()
    back_button = telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='music')
    markup.add(back_button)

    bot.send_message(
        call.message.chat.id,
        "üéµ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –∑ –º—É–∑–∏–∫–æ—é –≤ —Ü–µ–π —á–∞—Ç, —â–æ–± –¥–æ–¥–∞—Ç–∏ –π–æ–≥–æ, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞–∑–∞–¥', —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è.",
        reply_markup=markup
    )
    user_data[call.message.chat.id] = {'adding_music': True}

@bot.message_handler(content_types=['audio'])
def save_music_file(message):
    """
    –û–±—Ä–æ–±–ª—è—î –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞—É–¥—ñ–æ—Ñ–∞–π–ª—É –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

    –ó–±–µ—Ä—ñ–≥–∞—î —Ñ–∞–π–ª —É –±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª—è—î –ø—Ä–æ –¥—É–±–ª—é–≤–∞–Ω–Ω—è.

    Args:
        message (telebot.types.Message): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞—É–¥—ñ–æ—Ñ–∞–π–ª–æ–º.
    """
    user_state = user_data.get(message.chat.id, {})
    if not user_state.get('adding_music', False):
        bot.send_message(message.chat.id, "üéµ –í–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –º—É–∑–∏–∫–∏. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚ûï–î–æ–¥–∞—Ç–∏ –º—É–∑–∏–∫—É' —É –º–µ–Ω—é.")
        return

    file_name = message.audio.file_name or f"{message.audio.file_id}.mp3"
    file_id = message.audio.file_id
    user_id = message.chat.id

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ñ–∞–π–ª –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if file_name in music_data and any(entry["user_id"] == user_id for entry in music_data[file_name]):
        bot.send_message(message.chat.id, "üéµ –§–∞–π–ª –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î —É –≤–∞—à—ñ–π –±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ.")
    else:
        if (file_name not in music_data):
            music_data[file_name] = []
        music_data[file_name].append({"file_id": file_id, "user_id": user_id})
        save_music(music_data)
        bot.send_message(message.chat.id, "üéµ –§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–æ—ó –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏!")

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–í–∏–π—Ç–∏"
    markup = telebot.types.InlineKeyboardMarkup()
    exit_button = telebot.types.InlineKeyboardButton("üö™–í–∏–π—Ç–∏", callback_data='music')
    markup.add(exit_button)

    bot.send_message(message.chat.id, "üéµ –í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ –æ–¥–∏–Ω —Ñ–∞–π–ª –∞–±–æ –≤–∏–π—Ç–∏ –∑ —Ä–µ–∂–∏–º—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è.", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'music_option')
def handle_music_option(call):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ—ó –º—É–∑–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è.

    –í–∏–¥–∞–ª—è—î –ø–æ–ø–µ—Ä–µ–¥–Ω—î –º–µ–Ω—é —Ç–∞ –ø–æ–∫–∞–∑—É—î –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –º—ñ–∂ —Ç—Ä–µ–∫–∞–º–∏.

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    chat_id = call.message.chat.id

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –º–µ–Ω—é
    bot.delete_message(chat_id, call.message.message_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –º—É–∑–∏–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_tracks = [file_name for file_name, entries in music_data.items() if any(entry["user_id"] == chat_id for entry in entries)]

    if not user_tracks:
        bot.send_message(chat_id, "üéµ –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –º—É–∑–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤. –î–æ–¥–∞–π—Ç–µ —ó—Ö —á–µ—Ä–µ–∑ –º–µ–Ω—é '‚ûï–î–æ–¥–∞—Ç–∏ –º—É–∑–∏–∫—É'.")
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —ñ–Ω–¥–µ–∫—Å —Ç—Ä–µ–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if chat_id not in user_data:
        user_data[chat_id] = {}
    user_data[chat_id]['current_track_index'] = 0

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–µ—Ä—à–∏–π —Ç—Ä–µ–∫ —Ä–∞–∑–æ–º —ñ–∑ –∫–Ω–æ–ø–∫–∞–º–∏
    current_track_name = user_tracks[user_data[chat_id]['current_track_index']]
    current_track_id = next(entry["file_id"] for entry in music_data[current_track_name] if entry["user_id"] == chat_id)
    markup = telebot.types.InlineKeyboardMarkup()
    prev_button = telebot.types.InlineKeyboardButton("‚èÆÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", callback_data='prev_track')
    next_button = telebot.types.InlineKeyboardButton("‚è≠Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞", callback_data='next_track')
    back_button = telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='music')
    markup.row(prev_button, next_button)
    markup.add(back_button)

    bot.send_audio(chat_id, current_track_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ['prev_track', 'next_track'])
def handle_track_navigation(call):
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –º—ñ–∂ —Ç—Ä–µ–∫–∞–º–∏.

    –ü–æ–∫–∞–∑—É—î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∞–±–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç—Ä–µ–∫ —É —Å–ø–∏—Å–∫—É.

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    chat_id = call.message.chat.id
    user_tracks = [file_name for file_name, entries in music_data.items() if any(entry["user_id"] == chat_id for entry in entries)]

    if not user_tracks:
        bot.answer_callback_query(call.id, "üéµ –£ –≤–∞—Å –Ω–µ–º–∞—î –º—É–∑–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤.")
        return

    current_index = user_data[chat_id].get('current_track_index', 0)

    if call.data == 'prev_track':
        current_index = (current_index - 1) % len(user_tracks)
    elif call.data == 'next_track':
        current_index = (current_index + 1) % len(user_tracks)

    user_data[chat_id]['current_track_index'] = current_index

    current_track_name = user_tracks[current_index]
    current_track_id = next(entry["file_id"] for entry in music_data[current_track_name] if entry["user_id"] == chat_id)
    markup = telebot.types.InlineKeyboardMarkup()
    prev_button = telebot.types.InlineKeyboardButton("‚èÆÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", callback_data='prev_track')
    next_button = telebot.types.InlineKeyboardButton("‚è≠Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞", callback_data='next_track')
    back_button = telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='music')
    markup.row(prev_button, next_button)
    markup.add(back_button)

    bot.edit_message_media(
        chat_id=chat_id,
        message_id=call.message.message_id,
        media=telebot.types.InputMediaAudio(media=current_track_id),
        reply_markup=markup
    )

#–ü–ª–µ–π–ª–∏—Å—Ç–∏
@bot.callback_query_handler(func=lambda call: call.data == 'playlist')
def handle_playlist_menu(call):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –º–µ–Ω—é –º–æ–¥—É–ª—è "–ü–ª–µ–π–ª–∏—Å—Ç–∏".

    –ü–æ–∫–∞–∑—É—î –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É, —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤.

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    chat_id = call.message.chat.id

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ —ó—Ö —â–µ –Ω–µ–º–∞—î
    if chat_id not in user_data:
        user_data[chat_id] = {}

    # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
    user_data[chat_id]['creating_playlist'] = False

    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω—é
    markup = telebot.types.InlineKeyboardMarkup()
    view_playlists_button = telebot.types.InlineKeyboardButton("üìÇ–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∏", callback_data='view_playlists')
    create_playlist_button = telebot.types.InlineKeyboardButton("‚ûï–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç", callback_data='create_playlist')
    edit_playlists_button = telebot.types.InlineKeyboardButton("‚úèÔ∏è–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∏", callback_data='edit_playlists')
    back_button = telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='music')
    markup.row(view_playlists_button, create_playlist_button)
    markup.row(edit_playlists_button)
    markup.add(back_button)

    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=call.message.message_id,
        text="üìÑ <b>–ú–µ–Ω—é –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤:</b>\n\n"
             "üìÇ–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∏ ‚Äì –ø–µ—Ä–µ–≥–ª—è–¥ —Ç–∞ –≤–∏–±—ñ—Ä —ñ—Å–Ω—É—é—á–∏—Ö –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤.\n"
             "‚ûï–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç ‚Äì —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞.",
        reply_markup=markup,
        parse_mode='HTML'
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('view_playlists'))
def handle_view_playlists(call):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é.

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    chat_id = call.message.chat.id
    user_playlists = get_user_playlists(chat_id)

    if not user_playlists:
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, "üìÇ –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤. –î–æ–¥–∞–π—Ç–µ —ó—Ö —á–µ—Ä–µ–∑ –º–µ–Ω—é '‚ûï–î–æ–¥–∞—Ç–∏ –º—É–∑–∏–∫—É'.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑ callback_data
    data_parts = call.data.split(':')
    current_page = int(data_parts[1]) if len(data_parts) > 1 else 0

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
    playlists_per_page = 5
    playlist_names = list(user_playlists.keys())
    total_pages = (len(playlist_names) + playlists_per_page - 1) // playlists_per_page

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–ª–µ–π–ª–∏—Å—Ç–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start_index = current_page * playlists_per_page
    end_index = start_index + playlists_per_page
    page_playlists = playlist_names[start_index:end_index]

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤
    markup = telebot.types.InlineKeyboardMarkup()
    for playlist_name in page_playlists:
        playlist_button = telebot.types.InlineKeyboardButton(playlist_name, callback_data=f'play_playlist:{playlist_name}')
        markup.add(playlist_button)

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    if current_page > 0 and current_page < total_pages - 1:
        prev_button = telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f'view_playlists:{current_page - 1}')
        next_button = telebot.types.InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f'view_playlists:{current_page + 1}')
        markup.row(prev_button, next_button)
    elif current_page > 0:
        prev_button = telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f'view_playlists:{current_page - 1}')
        markup.add(prev_button)
    elif current_page < total_pages - 1:
        next_button = telebot.types.InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f'view_playlists:{current_page + 1}')
        markup.add(next_button)

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    back_button = telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='music')
    markup.add(back_button)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏
    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=call.message.message_id,
        text=f"üéµ <b>–í–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages}):</b>",
        reply_markup=markup,
        parse_mode='HTML'
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('play_playlist:'))
def handle_play_playlist(call):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ç—Ä–µ–∫–∏ –∑ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é.

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    chat_id = call.message.chat.id
    data_parts = call.data.split(':')
    playlist_name = data_parts[1]
    current_page = int(data_parts[2]) if len(data_parts) > 2 else 0

    user_playlists = get_user_playlists(chat_id)

    if (playlist_name not in user_playlists):
        bot.answer_callback_query(call.id, "‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    playlist_tracks = user_playlists[playlist_name]

    if not playlist_tracks:
        bot.answer_callback_query(call.id, f"‚ùå –ü–ª–µ–π–ª–∏—Å—Ç '{playlist_name}' –ø—É—Å—Ç–∏–π.")
        return

    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    tracks_per_page = 5
    total_pages = (len(playlist_tracks) + tracks_per_page - 1) // tracks_per_page
    start_index = current_page * tracks_per_page
    end_index = start_index + tracks_per_page
    page_tracks = playlist_tracks[start_index:end_index]

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –º–µ–Ω—é
    bot.delete_message(chat_id, call.message.message_id)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç—Ä–µ–∫–∏ –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
    for track_name in page_tracks:
        track_id = next(
            (entry["file_id"] for entry in music_data.get(track_name, []) if entry["user_id"] == chat_id),
            None
        )
        if track_id:
            bot.send_audio(chat_id, track_id)

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    markup = telebot.types.InlineKeyboardMarkup()
    if current_page > 0:
        prev_button = telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞", callback_data=f'play_playlist:{playlist_name}:{current_page - 1}')
        markup.add(prev_button)
    if current_page < total_pages - 1:
        next_button = telebot.types.InlineKeyboardButton("‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞", callback_data=f'play_playlist:{playlist_name}:{current_page + 1}')
        markup.add(next_button)

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–í–∏–¥–∞–ª–∏—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç"
    back_button = telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='view_playlists')
    markup.add(back_button)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–ª–µ–π–ª–∏—Å—Ç–æ–º
    bot.send_message(
        chat_id,
        f"üéµ –ü–ª–µ–π–ª–∏—Å—Ç '{playlist_name}' (–°—Ç–æ—Ä—ñ–Ω–∫–∞ {current_page + 1} –∑ {total_pages}):",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == 'edit_playlists' or call.data.startswith('edit_playlists:'))
def handle_edit_playlists_menu(call):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é.

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    chat_id = call.message.chat.id
    user_playlists = get_user_playlists(chat_id)

    if not user_playlists:
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, "üìÇ –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è. –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —á–µ—Ä–µ–∑ –º–µ–Ω—é –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑ callback_data
    data_parts = call.data.split(':')
    current_page = int(data_parts[1]) if len(data_parts) > 1 else 0

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
    playlists_per_page = 5
    playlist_names = list(user_playlists.keys())
    total_pages = (len(playlist_names) + playlists_per_page - 1) // playlists_per_page

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–ª–µ–π–ª–∏—Å—Ç–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start_index = current_page * playlists_per_page
    end_index = start_index + playlists_per_page
    page_playlists = playlist_names[start_index:end_index]

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤
    markup = telebot.types.InlineKeyboardMarkup()
    for playlist_name in page_playlists:
        edit_button = telebot.types.InlineKeyboardButton(playlist_name, callback_data=f'edit_playlist:{playlist_name}')
        markup.add(edit_button)

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    if current_page > 0 and current_page < total_pages - 1:
        prev_button = telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞", callback_data=f'edit_playlists:{current_page - 1}')
        next_button = telebot.types.InlineKeyboardButton("‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞", callback_data=f'edit_playlists:{current_page + 1}')
        markup.row(prev_button, next_button)
    elif current_page > 0:
        prev_button = telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞", callback_data=f'edit_playlists:{current_page - 1}')
        markup.add(prev_button)
    elif current_page < total_pages - 1:
        next_button = telebot.types.InlineKeyboardButton("‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞", callback_data=f'edit_playlists:{current_page + 1}')
        markup.add(next_button)

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    back_button = telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='playlist')
    markup.add(back_button)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏
    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=call.message.message_id,
        text=f"‚úèÔ∏è <b>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤ (–°—Ç–æ—Ä—ñ–Ω–∫–∞ {current_page + 1} –∑ {total_pages}):</b>",
        reply_markup=markup,
        parse_mode='HTML'
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_playlist:'))
def handle_edit_playlist(call):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.

    –ó–±–µ—Ä—ñ–≥–∞—î –Ω–∞–∑–≤—É –ø–ª–µ–π–ª–∏—Å—Ç–∞ –≤ user_data —ñ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    chat_id = call.message.chat.id
    playlist_name = call.data.split(':')[1]

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–ª–µ–π–ª–∏—Å—Ç —É user_data
    if chat_id not in user_data:
        user_data[chat_id] = {}
    user_data[chat_id]['editing_playlist'] = playlist_name

    # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –º–µ–Ω—é
    bot.delete_message(chat_id, call.message.message_id)

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏
    markup = telebot.types.InlineKeyboardMarkup()
    edit_tracks_button = telebot.types.InlineKeyboardButton("üéµ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç—Ä–µ–∫–∏", callback_data='manage_tracks:0')
    back_button = telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='edit_playlists:0')
    markup.row(edit_tracks_button, back_button)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.send_message(
        chat_id,
        f"üìÇ –ü–ª–µ–π–ª–∏—Å—Ç: <b>{playlist_name}</b>",
        reply_markup=markup,
        parse_mode='HTML'
    )

@bot.callback_query_handler(func=lambda call: call.data == 'create_playlist')
def handle_create_playlist(call):
    """
    –û–±—Ä–æ–±–ª—è—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞.

    –ó–∞–ø–∏—Ç—É—î —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞.

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.answer_callback_query(call.id)

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    markup = telebot.types.InlineKeyboardMarkup()
    back_button = telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='playlist')
    markup.add(back_button)

    bot.send_message(
        call.message.chat.id,
        "üìÑ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞–∑–∞–¥', —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è:",
        reply_markup=markup
    )

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
    user_data[call.message.chat.id] = {'creating_playlist': True}

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('creating_playlist', False))
def save_playlist_name(message):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ —Ç–∞ –¥–æ–¥–∞—î –π–æ–≥–æ –¥–æ —Å–ø–∏—Å–∫—É –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

    Args:
        message (telebot.types.Message): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –Ω–∞–∑–≤–æ—é –ø–ª–µ–π–ª–∏—Å—Ç–∞.
    """
    chat_id = message.chat.id
    playlist_name = message.text.strip().lower()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–ø—Ä–∞–≤–∏–≤ "–Ω–∞–∑–∞–¥"
    if playlist_name == "–Ω–∞–∑–∞–¥":
        # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤
        if chat_id in user_data:
            user_data[chat_id]['creating_playlist'] = False
        handle_playlist_menu_direct(chat_id)
        return

    user_playlists = get_user_playlists(chat_id)

    if playlist_name in user_playlists:
        bot.send_message(chat_id, "‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É.")
    else:
        user_playlists[playlist_name] = []
        update_user_playlists(chat_id, user_playlists)
        logging.debug(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –ø–ª–µ–π–ª–∏—Å—Ç: {playlist_name} –¥–ª—è —á–∞—Ç—É {chat_id}.")
        bot.send_message(chat_id, f"‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç '{playlist_name}' —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")

    # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
    if chat_id in user_data:
        user_data[chat_id]['creating_playlist'] = False

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤
    handle_playlist_menu_direct(chat_id)

def handle_playlist_menu_direct(chat_id):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –º–µ–Ω—é –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤ –±–µ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è CallbackQuery.

    Args:
        chat_id (int): ID —á–∞—Ç—É.
    """
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ —ó—Ö —â–µ –Ω–µ–º–∞—î
    if chat_id not in user_data:
        user_data[chat_id] = {}

    # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
    user_data[chat_id]['creating_playlist'] = False

    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω—é
    markup = telebot.types.InlineKeyboardMarkup()
    view_playlists_button = telebot.types.InlineKeyboardButton("üìÇ–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∏", callback_data='view_playlists')
    create_playlist_button = telebot.types.InlineKeyboardButton("‚ûï–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç", callback_data='create_playlist')
    edit_playlists_button = telebot.types.InlineKeyboardButton("‚úèÔ∏è–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∏", callback_data='edit_playlists')
    back_button = telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='music')
    markup.row(view_playlists_button, create_playlist_button)
    markup.row(edit_playlists_button)
    markup.add(back_button)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.send_message(
        chat_id,
        "üìÑ <b>–ú–µ–Ω—é –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤:</b>\n\n"
        "üìÇ–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∏ ‚Äì –ø–µ—Ä–µ–≥–ª—è–¥ —Ç–∞ –≤–∏–±—ñ—Ä —ñ—Å–Ω—É—é—á–∏—Ö –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤.\n"
        "‚ûï–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç ‚Äì —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞.",
        reply_markup=markup,
        parse_mode='HTML'
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('manage_tracks:'))
def handle_manage_tracks(call):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫—ñ–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —É –ø–ª–µ–π–ª–∏—Å—Ç—ñ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é.

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    chat_id = call.message.chat.id
    current_page = int(call.data.split(':')[1])

    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∑ user_data
    playlist_name = user_data.get(chat_id, {}).get('editing_playlist')
    if not playlist_name:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞: –ø–ª–µ–π–ª–∏—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    user_playlists = get_user_playlists(chat_id)
    playlist_tracks = user_playlists.get(playlist_name, [])

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö —Ç—Ä–µ–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_tracks = [file_name for file_name, entries in music_data.items() if any(entry["user_id"] == chat_id for entry in entries)]

    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    tracks_per_page = 5
    total_pages = (len(user_tracks) + tracks_per_page - 1) // tracks_per_page
    start_index = current_page * tracks_per_page
    end_index = start_index + tracks_per_page
    page_tracks = user_tracks[start_index:end_index]

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –º–µ–Ω—é
    bot.delete_message(chat_id, call.message.message_id)

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç—Ä–µ–∫—ñ–≤
    markup = telebot.types.InlineKeyboardMarkup()
    for track_name in page_tracks:
        # –°–∫–æ—Ä–æ—á—É—î–º–æ callback_data
        if track_name in playlist_tracks:
            button = telebot.types.InlineKeyboardButton("‚ùå " + track_name[:20], callback_data=f'rm:{current_page}:{track_name}')
        else:
            button = telebot.types.InlineKeyboardButton("‚ûï " + track_name[:20], callback_data=f'add:{current_page}:{track_name}')
        markup.add(button)

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    pagination_buttons = []
    if current_page > 0:
        pagination_buttons.append(telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", callback_data=f'manage_tracks:{current_page - 1}'))
    if current_page < total_pages - 1:
        pagination_buttons.append(telebot.types.InlineKeyboardButton("‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞", callback_data=f'manage_tracks:{current_page + 1}'))
    if pagination_buttons:
        markup.row(*pagination_buttons)

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    back_button = telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'edit_playlist:{playlist_name}')
    markup.add(back_button)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.send_message(
        chat_id,
        f"üéµ –¢—Ä–µ–∫–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —É –ø–ª–µ–π–ª–∏—Å—Ç—ñ '{playlist_name}' (–°—Ç–æ—Ä—ñ–Ω–∫–∞ {current_page + 1} –∑ {total_pages}):",
        reply_markup=markup
    )

def update_manage_tracks_message(call, playlist_name, chat_id):
    """
    –û–Ω–æ–≤–ª—é—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç—Ä–µ–∫—ñ–≤ —É –ø–ª–µ–π–ª–∏—Å—Ç—ñ.

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
        playlist_name (str): –ù–∞–∑–≤–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞.
        chat_id (int): ID —á–∞—Ç—É.
    """
    user_playlists = get_user_playlists(chat_id)
    playlist_tracks = user_playlists.get(playlist_name, [])
    user_tracks = [file_name for file_name, entries in music_data.items() if any(entry["user_id"] == chat_id for entry in entries)]

    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    current_page = int(call.data.split(':')[-1]) if call.data.split(':')[-1].isdigit() else 0
    tracks_per_page = 5
    total_pages = (len(user_tracks) + tracks_per_page - 1) // tracks_per_page
    start_index = current_page * tracks_per_page
    end_index = start_index + tracks_per_page
    page_tracks = user_tracks[start_index:end_index]

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç—Ä–µ–∫—ñ–≤
    markup = telebot.types.InlineKeyboardMarkup()
    for track_name in page_tracks:
        if track_name in playlist_tracks:
            # –Ø–∫—â–æ —Ç—Ä–µ–∫ —î —É –ø–ª–µ–π–ª–∏—Å—Ç—ñ, –ø–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É "–í–∏–¥–∞–ª–∏—Ç–∏"
            button = telebot.types.InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ " + track_name[:20], callback_data=f'rm:{current_page}:{track_name}')
        else:
            # –Ø–∫—â–æ —Ç—Ä–µ–∫—É –Ω–µ–º–∞—î —É –ø–ª–µ–π–ª–∏—Å—Ç—ñ, –ø–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É "–î–æ–¥–∞—Ç–∏"
            button = telebot.types.InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ " + track_name[:20], callback_data=f'add:{current_page}:{track_name}')
        markup.add(button)

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    pagination_buttons = []
    if current_page > 0:
        pagination_buttons.append(telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", callback_data=f'manage_tracks:{current_page - 1}'))
    if current_page < total_pages - 1:
        pagination_buttons.append(telebot.types.InlineKeyboardButton("‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞", callback_data=f'manage_tracks:{current_page + 1}'))
    if pagination_buttons:
        markup.row(*pagination_buttons)

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    back_button = telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'edit_playlist:{playlist_name}')
    markup.add(back_button)

    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=call.message.message_id,
        text=f"üéµ –¢—Ä–µ–∫–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —É –ø–ª–µ–π–ª–∏—Å—Ç—ñ '{playlist_name}' (–°—Ç–æ—Ä—ñ–Ω–∫–∞ {current_page + 1} –∑ {total_pages}):",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('add:'))
def handle_add_track_to_playlist(call):
    """
    –î–æ–¥–∞—î –≤–∏–±—Ä–∞–Ω–∏–π —Ç—Ä–µ–∫ –¥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞.

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    chat_id = call.message.chat.id
    data_parts = call.data.split(':')
    current_page = int(data_parts[1])
    track_name = ':'.join(data_parts[2:])

    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∑ user_data
    playlist_name = user_data.get(chat_id, {}).get('editing_playlist')
    if not playlist_name:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞: –ø–ª–µ–π–ª–∏—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    user_playlists = get_user_playlists(chat_id)
    if playlist_name in user_playlists:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç—Ä–µ–∫ –≤–∂–µ —î —É –ø–ª–µ–π–ª–∏—Å—Ç—ñ
        if track_name not in user_playlists[playlist_name]:
            # –î–æ–¥–∞—î–º–æ —Ç—Ä–µ–∫ –¥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
            user_playlists[playlist_name].append(track_name)
            update_user_playlists(chat_id, user_playlists)
            bot.answer_callback_query(call.id, f"‚úÖ –¢—Ä–µ–∫ '{track_name}' –¥–æ–¥–∞–Ω–æ –¥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞.")
            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
            update_manage_tracks_message(call, playlist_name, chat_id)
        else:
            bot.answer_callback_query(call.id, "‚ùå –¢—Ä–µ–∫ –≤–∂–µ —î —É –ø–ª–µ–π–ª–∏—Å—Ç—ñ.")
    else:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞: –ø–ª–µ–π–ª–∏—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('rm:'))
def handle_remove_track(call):
    """
    –í–∏–¥–∞–ª—è—î –≤–∏–±—Ä–∞–Ω–∏–π —Ç—Ä–µ–∫ –∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞.

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    chat_id = call.message.chat.id
    data_parts = call.data.split(':')
    current_page = int(data_parts[1])
    track_name = ':'.join(data_parts[2:])

    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∑ user_data
    playlist_name = user_data.get(chat_id, {}).get('editing_playlist')
    if not playlist_name:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞: –ø–ª–µ–π–ª–∏—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    user_playlists = get_user_playlists(chat_id)
    if playlist_name in user_playlists and track_name in user_playlists[playlist_name]:
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç—Ä–µ–∫ –∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞
        user_playlists[playlist_name].remove(track_name)
        update_user_playlists(chat_id, user_playlists)
        bot.answer_callback_query(call.id, f"‚úÖ –¢—Ä–µ–∫ '{track_name}' –≤–∏–¥–∞–ª–µ–Ω–æ.")
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        update_manage_tracks_message(call, playlist_name, chat_id)
    else:
        bot.answer_callback_query(call.id, "‚ùå –¢—Ä–µ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –ø–ª–µ–π–ª–∏—Å—Ç—ñ.")

#–ö—ñ–Ω–µ—Ü—å
if __name__ == "__main__":
    """
    –ó–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞ —É —Ä–µ–∂–∏–º—ñ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è.
    """
    bot.polling()