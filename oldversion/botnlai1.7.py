import telebot
import os
import hashlib
import json
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(—É—Ä–æ–≤–µ–Ω—å)s - %(—Å–æ–æ–±—â–µ–Ω–∏–µ)s')

def calculate_file_hash(file_content):
    """
    –û–±—á–∏—Å–ª—é—î SHA-256 —Ö–µ—à –¥–ª—è –≤–º—ñ—Å—Ç—É —Ñ–∞–π–ª—É.

    Args:
        file_content (bytes): –í–º—ñ—Å—Ç —Ñ–∞–π–ª—É —É –±–∞–π—Ç–∞—Ö.

    Returns:
        str: SHA-256 —Ö–µ—à —É –≤–∏–≥–ª—è–¥—ñ —à—ñ—Å—Ç–Ω–∞–¥—Ü—è—Ç–∫–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞.
    """
    sha256 = hashlib.sha256()
    sha256.update(file_content)
    return sha256.hexdigest()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –±–æ—Ç–∞
bot = telebot.TeleBot('8064955635:AAHe78CWompJ-CQxoIOUQ_4OryhjeIkd6vw')

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_data = {}

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ö–µ—à—ñ–≤ —Ñ–∞–π–ª—ñ–≤
file_hashes = {}

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
playlists = []

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
PLAYLISTS_FILE = 'playlists.json'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_playlists():
    global playlists
    try:
        with open(PLAYLISTS_FILE, 'r', encoding='utf-8') as file:
            playlists = json.load(file)
            logging.debug("–ü–ª–µ–π–ª–∏—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞.")
    except FileNotFoundError:
        playlists = []
        logging.warning("–§–∞–π–ª playlists.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤.")
    except json.JSONDecodeError as e:
        playlists = []
        logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}. –°–æ–∑–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª
def save_playlists():
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç—ã –≤ —Ñ–∞–π–ª.
    """
    try:
        with open(PLAYLISTS_FILE, 'w', encoding='utf-8') as file:
            json.dump(playlists, file, ensure_ascii=False, indent=4)
        logging.debug("–ü–ª–µ–π–ª–∏—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_playlists(user_id):
    for user_data in playlists:
        if user_data["user_id"] == user_id:
            return user_data["playlists"]
    return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_playlists(user_id, updated_playlists):
    for user_data in playlists:
        if user_data["user_id"] == user_id:
            user_data["playlists"] = updated_playlists
            save_playlists()
            return
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ
    playlists.append({"user_id": user_id, "playlists": updated_playlists})
    save_playlists()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_playlists()

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """
    –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /start.

    –í—ñ—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–¥—É–ª—ñ–≤.

    Args:
        message (telebot.types.Message): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    # –°—Ç–∞–≤–∏–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è adding_music –≤ False
    if message.chat.id in user_data:
        user_data[message.chat.id]['adding_music'] = False

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    markup = telebot.types.InlineKeyboardMarkup()
    music_button = telebot.types.InlineKeyboardButton("üéµ–ü–æ—á–∞—Ç–∏", callback_data='music')
    markup.row(music_button)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.send_message(
        message.chat.id,
        "üéµ <b>–ü—Ä–∏–≤—ñ—Ç!</b> –Ø ‚Äî —Ç–≤—ñ–π –º—É–∑–∏—á–Ω–∏–π –±–æ—Ç! üé∂\n\n"
        "–Ø –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ —Å–ª—É—Ö–∞—Ç–∏ —É–ª—é–±–ª–µ–Ω—É –º—É–∑–∏–∫—É, —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∏ —Ç–∞ –Ω–∞—Å–æ–ª–æ–¥–∂—É–≤–∞—Ç–∏—Å—è –∑–≤—É–∫–æ–º! üî•\n\n"
        "<i>–î–∞–≤–∞–π —Å–ª—É—Ö–∞—Ç–∏ –º—É–∑–∏–∫—É —Ä–∞–∑–æ–º!</i> üéß‚ú®",
        reply_markup=markup,
        parse_mode='HTML'
    )

@bot.callback_query_handler(func=lambda call: call.data == 'music')
def music_menu(call):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –º–æ–¥—É–ª—è "–ú—É–∑–∏–∫–∞".

    –í–∏–¥–∞–ª—è—î –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –º–µ–Ω—é –∑ –æ–ø—Ü—ñ—è–º–∏ –¥–ª—è –º—É–∑–∏–∫–∏, –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤ —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤.

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    # –°—Ç–∞–≤–∏–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è adding_music –≤ False
    if call.message.chat.id in user_data:
        user_data[call.message.chat.id]['adding_music'] = False

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.delete_message(call.message.chat.id, call.message.message_id)

    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω—é
    markup = telebot.types.InlineKeyboardMarkup()
    music_button = telebot.types.InlineKeyboardButton("üé∂–ü—Ä–æ—Å–ª—É—Ö–∞—Ç–∏ –º—É–∑–∏–∫—É", callback_data='music_option')
    playlist_button = telebot.types.InlineKeyboardButton("üìÑ–ü–ª–µ–π–ª–∏—Å—Ç–∏", callback_data='playlist')
    tools_button = telebot.types.InlineKeyboardButton("‚öôÔ∏è–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏", callback_data='tools')
    add_music_button = telebot.types.InlineKeyboardButton("‚ûï–î–æ–¥–∞—Ç–∏ –º—É–∑–∏–∫—É", callback_data='add_music')
    markup.row(music_button, playlist_button)
    markup.row(tools_button, add_music_button)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.send_message(
        call.message.chat.id,
        "<b>üéµ –û–ø–∏—Å –∫–Ω–æ–ø–æ–∫:</b> \n\n"
        "<b>üé∂–ü—Ä–æ—Å–ª—É—Ö–∞—Ç–∏ –º—É–∑–∏–∫—É</b> ‚Äì –≤–∏–±—ñ—Ä —ñ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–µ–∫—ñ–≤.\n\n"
        "<b>üìÑ–ü–ª–µ–π–ª–∏—Å—Ç–∏</b> ‚Äì –ø–µ—Ä–µ–≥–ª—è–¥ —Ç–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏.\n\n"
        "<b>‚öôÔ∏è–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏</b> ‚Äì –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º—É–∑–∏–∫–∏ —á–∏ –ø–ª–µ–π–ª—ñ—Å—Ç—ñ–≤.\n\n"
        "<b>‚ûï–î–æ–¥–∞—Ç–∏ –º—É–∑–∏–∫—É</b> ‚Äì –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ç—Ä–µ–∫—ñ–≤.",
        reply_markup=markup,
        parse_mode='HTML'
    )

@bot.callback_query_handler(func=lambda call: call.data == 'add_music')
def handle_add_music(call):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º—É–∑—ã–∫–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã.
    """
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "üéµ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º—É–∑—ã–∫–æ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤.")
    user_data[call.message.chat.id] = {'adding_music': True}

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('adding_music', False))
def add_music_from_folder(message):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –º—É–∑—ã–∫—É –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–∞–ø–∫–∏.
    """
    folder_path = message.text.strip()
    chat_id = message.chat.id

    if not os.path.exists(folder_path) or not os.path.isdir(folder_path):
        bot.send_message(chat_id, "‚ùå –£–∫–∞–∑–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
        return

    music_files = [f for f in os.listdir(folder_path) if f.endswith(('.mp3', '.wav'))]
    if not music_files:
        bot.send_message(chat_id, "üéµ –í —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ—Ç –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
        return

    os.makedirs('downloads', exist_ok–µ–π=True)
    for music_file in music_files:
        source_path = os.path.join(folder_path, music_file)
        destination_path = os.path.join('downloads', music_file)
        if not os.path.exists(destination_path):
            os.rename(source_path, destination_path)

    bot.send_message(chat_id, "‚úÖ –ú—É–∑—ã–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏!")
    user_data[chat_id]['adding_music'] = False

@bot.message_handler(content_types=['audio'])
def save_music_file(message):
    """
    –û–±—Ä–æ–±–ª—è—î –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞—É–¥—ñ–æ—Ñ–∞–π–ª—É –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

    –ó–±–µ—Ä—ñ–≥–∞—î —Ñ–∞–π–ª —É –ø–∞–ø–∫—É 'downloads', —è–∫—â–æ —Ç–∞–∫–æ–≥–æ —Ñ–∞–π–ª—É —â–µ –Ω–µ–º–∞—î.
    –Ø–∫—â–æ —Ñ–∞–π–ª –≤–∂–µ —ñ—Å–Ω—É—î, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –¥–æ–¥–∞—î –∫–Ω–æ–ø–∫—É "–í–∏–π—Ç–∏".

    Args:
        message (telebot.types.Message): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞—É–¥—ñ–æ—Ñ–∞–π–ª–æ–º.
    """
    user_state = user_data.get(message.chat.id, {})
    if not user_state.get('adding_music', False):
        bot.send_message(message.chat.id, "üéµ –í–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –º—É–∑–∏–∫–∏. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚ûï–î–æ–¥–∞—Ç–∏ –º—É–∑–∏–∫—É' —É –º–µ–Ω—é.")
        return

    file_info = bot.get_file(message.audio.file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    # –û–±—á–∏—Å–ª—é—î–º–æ —Ö–µ—à —Ñ–∞–π–ª—É
    file_hash = calculate_file_hash(downloaded_file)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ñ–∞–π–ª –≤–∂–µ —ñ—Å–Ω—É—î
    if file_hash in file_hashes:
        bot.send_message(message.chat.id, "üéµ –¶–µ–π —Ñ–∞–π–ª –≤–∂–µ —ñ—Å–Ω—É—î —É –≤–∞—à—ñ–π –±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ.")
    else:
        file_name = message.audio.file_name or f"{message.audio.file_id}.mp3"
        file_path = os.path.join('downloads', file_name)
        os.makedirs('downloads', exist_ok–µ–π=True)
        with open(file_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        file_hashes[file_hash] = file_path
        bot.send_message(message.chat.id, "üéµ –§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–æ—ó –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏!")

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–í–∏–π—Ç–∏"
    markup = telebot.types.InlineKeyboardMarkup()
    exit_button = telebot.types.InlineKeyboardButton("üö™–í–∏–π—Ç–∏", callback_data='music')
    markup.add(exit_button)

    bot.send_message(message.chat.id, "üéµ –í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ –æ–¥–∏–Ω —Ñ–∞–π–ª –∞–±–æ –≤–∏–π—Ç–∏ –∑ —Ä–µ–∂–∏–º—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è.", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'music_option')
def handle_music_option(call):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –º–æ–¥—É–ª—è "–ú—É–∑—ã–∫–∞".

    –ó–∞–ø—É—Å–∫–∞—î –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –º—É–∑–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤.

    Args:
        call (telebot.types.CallbackQuery): –æ–±—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    global user_data
    chat_id = call.message.chat.id

    # –ü–µ—Ä–µ–≤—ñ—Ä—è–µ–º–æ –Ω–∞—è–≤–Ω—ñ—Ç—å –º—É–∑–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ —É –ø–∞–ø—Ü—ñ downloads
    music_files = [f for f in os.listdir('downloads') if f.endswith(('.mp3', '.wav'))]
    if not music_files:
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, "üéµ –§–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_data[chat_id] = {'music_files': music_files, 'current_index': 0}
    current_music = music_files[0]

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    markup = telebot.types.InlineKeyboardMarkup()
    prev_button = telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è–ü–æ–ø–µ—Ä–µ–¥–Ω—è", callback_data='prev_music')
    play_button = telebot.types.InlineKeyboardButton("‚ñ∂Ô∏è–ü—Ä–æ—Å–ª—É—Ö–∞—Ç–∏", callback_data='play_music')
    next_button = telebot.types.InlineKeyboardButton("‚û°Ô∏è–ù–∞—Å—Ç—É–ø–Ω–∞", callback_data='next_music')
    markup.add(prev_button, play_button, next_button)

    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=call.message.message_id,
        text=f"üéµ –ó–∞—Ä–∞–∑: {current_music}",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data in ['prev_music', 'next_music', 'play_music'])
def handle_music_controls(call):
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –º—É–∑–∏–∫–æ—é.

    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∞—É–¥—ñ–æ—Ñ–∞–π–ª –∞–±–æ –∑–º—ñ–Ω—é—î —ñ–Ω–¥–µ–∫—Å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ/–ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ç—Ä–µ–∫—É.

    Args:
        call (telebot.types.CallbackQuery): –û–±—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    global user_data
    chat_id = call.message.chat.id

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_data_entry = user_data.get(chat_id, {})
    music_files = user_data_entry.get('music_files', [])
    current_index = user_data_entry.get('current_index', 0)

    if not music_files:
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, "üéµ –§–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
        return

    # –û–±—Ä–æ–±–ª—è—î–º–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
    if call.data == 'prev_music':
        current_index = (current_index - 1) % len(music_files)
    elif call.data == 'next_music':
        current_index = (current_index + 1) % len(music_files)
    elif call.data == 'play_music':
        music_path = os.path.join('downloads', music_files[current_index])
        with open(music_path, 'rb') as music_file:
            bot.answer_callback_query(call.id)
            bot.send_audio(chat_id, music_file)
        return

    # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω–¥–µ–∫—Å —Ç–∞ –Ω–∞–∑–≤—É —Ç—Ä–µ–∫—É
    user_data[chat_id]['current_index'] = current_index
    current_music = music_files[current_index]

    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    markup = telebot.types.InlineKeyboardMarkup()
    prev_button = telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è–ü–æ–ø–µ—Ä–µ–¥–Ω—è", callback_data='prev_music')
    play_button = telebot.types.InlineKeyboardButton("‚ñ∂Ô∏è–ü—Ä–æ—Å–ª—É—Ö–∞—Ç–∏", callback_data='play_music')
    next_button = telebot.types.InlineKeyboardButton("‚û°Ô∏è–ù–∞—Å—Ç—É–ø–Ω–∞", callback_data='next_music')
    markup.add(prev_button, play_button, next_button)

    bot.answer_callback_query(call.id)
    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                          text=f"üéµ –ó–∞—Ä–∞–∑: {current_music}", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'playlist')
def handle_playlist_menu(call):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥—É–ª—è "–ü–ª–µ–π–ª–∏—Å—Ç—ã".

    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å –æ–ø—Ü–∏—è–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏.

    Args:
        call (telebot.types.CallbackQuery): –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
    """
    chat_id = call.message.chat.id

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
    markup = telebot.types.InlineKeyboardMarkup()
    view_playlists_button = telebot.types.InlineKeyboardButton("üìÇ–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã", callback_data='view_playlists')
    create_playlist_button = telebot.types.InlineKeyboardButton("‚ûï–°–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç", callback_data='create_playlist')
    edit_playlist_button = telebot.types.InlineKeyboardButton("‚úèÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç", callback_data='edit_playlist')
    markup.row(create_playlist_button, edit_playlist_button)
    markup.row(view_playlists_button)

    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=call.message.message_id,
        text="üìÑ <b>–ú–µ–Ω—é –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤:</b>\n\n"
             "‚ûï–°–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç ‚Äì —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞.\n"
             "‚úèÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç ‚Äì —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞–º–∏ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ.\n"
             "üìÇ–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã ‚Äì –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –≤—ã–±–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤.",
        reply_markup=markup,
        parse_mode='HTML'
    )

@bot.callback_query_handler(func=lambda call: call.data == 'edit_playlist')
def handle_edit_playlist_menu(call):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

    Args:
        call (telebot.types.CallbackQuery): –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
    """
    chat_id = call.message.chat.id
    user_playlists = get_user_playlists(chat_id)

    if not user_playlists:
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, "üìÇ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —á–µ—Ä–µ–∑ –º–µ–Ω—é –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
    markup = telebot.types.InlineKeyboardMarkup()
    for playlist_name in user_playlists:
        edit_button = telebot.types.InlineKeyboardButton(playlist_name, callback_data=f'manage_playlist:{playlist_name}')
        markup.add(edit_button)

    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=call.message.message_id,
        text="‚úèÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>",
        reply_markup=markup,
        parse_mode='HTML'
    )

@bot.callback_query_handler(func=lambda call: call.data == 'create_playlist')
def handle_create_playlist(call):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞.

    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞.

    Args:
        call (telebot.types.CallbackQuery): –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
    """
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "üìÑ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞:")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
    user_data[call.message.chat.id] = {'creating_playlist': True}

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('creating_playlist', False))
def save_playlist_name(message):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        message (telebot.types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–ª–µ–π–ª–∏—Å—Ç–∞.
    """
    chat_id = message.chat.id
    playlist_name = message.text.strip()
    user_playlists = get_user_playlists(chat_id)

    if playlist_name in user_playlists:
        bot.send_message(chat_id, "‚ùå –ü–ª–µ–π–ª–∏—Å—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
    else:
        user_playlists[playlist_name] = []
        update_user_playlists(chat_id, user_playlists)
        logging.debug(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç: {playlist_name} –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
        bot.send_message(chat_id, f"‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç '{playlist_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_data[chat_id]['creating_playlist'] = False

@bot.callback_query_handler(func=lambda call: call.data == 'view_playlists')
def handle_view_playlists(call):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        call (telebot.types.CallbackQuery): –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
    """
    chat_id = call.message.chat.id
    user_playlists = get_user_playlists(chat_id)

    if not user_playlists:
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, "üìÇ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —á–µ—Ä–µ–∑ –º–µ–Ω—é –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
    markup = telebot.types.InlineKeyboardMarkup()
    for playlist_name in user_playlists:
        playlist_button = telebot.types.InlineKeyboardButton(playlist_name, callback_data=f'open_playlist:{playlist_name}')
        markup.add(playlist_button)

    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=call.message.message_id,
        text="üìÇ <b>–í–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã:</b>",
        reply_markup=markup,
        parse_mode='HTML'
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('open_playlist:'))
def handle_open_playlist(call):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ –Ω–µ–≥–æ.

    Args:
        call (telebot.types.CallbackQuery): –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
    """
    chat_id = call.message.chat.id
    playlist_name = call.data.split(':', 1)[1]
    user_playlists = get_user_playlists(chat_id)

    if playlist_name not in user_playlists:
        bot.answer_callback_query(call.id, "‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if playlist_name not in user_playlists or not user_playlists[playlist_name]:
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, f"‚ùå –ü–ª–µ–π–ª–∏—Å—Ç '{playlist_name}' –ø—É—Å—Ç.")
        return

    tracks = user_playlists[playlist_name]
    if not tracks:
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, f"üìÇ –ü–ª–µ–π–ª–∏—Å—Ç '{playlist_name}' –ø—É—Å—Ç.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞
    for track in tracks:
        track_path = os.path.join('downloads', track)
        if (os.path.exists(track_path)):
            with open(track_path, 'rb') as music_file:
                bot.send_audio(chat_id, music_file)
        else:
            bot.send_message(chat_id, f"‚ùå –¢—Ä–µ–∫ '{track}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ 'downloads'.")

    bot.answer_callback_query(call.id, f"‚úÖ –í—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ '{playlist_name}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('manage_playlist:'))
def handle_manage_playlist(call):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞–º–∏ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ).

    Args:
        call (telebot.types.CallbackQuery): –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
    """
    chat_id = call.message.chat.id
    playlist_name = call.data.split(':', 1)[1]
    user_playlists = get_user_playlists(chat_id)

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–ª–µ–π–ª–∏—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if playlist_name not in user_playlists:
        bot.answer_callback_query(call.id, "‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
    music_files = [f for f in os.listdir('downloads') if f.endswith(('.mp3', '.wav'))]
    if not music_files:
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, "üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤
    markup = telebot.types.InlineKeyboardMarkup()
    for track in music_files:
        track_id = hashlib.md5(track.encode()).hexdigest()[:10]  # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        if track in user_playlists[playlist_name]:
            button = telebot.types.InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {track}", callback_data=f'remove:{playlist_name}:{track_id}')
        else:
            button = telebot.types.InlineKeyboardButton(f"‚ûï –î–æ–±–∞–≤–∏—Ç—å {track}", callback_data=f'add:{playlist_name}:{track_id}')
        markup.add(button)

  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=call.message.message_id,
        text=f"üéµ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–º '{playlist_name}':",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('add:'))
def handle_add_track(call):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–∫ –≤ –ø–ª–µ–π–ª–∏—Å—Ç.

    Args:
        call (telebot.types.CallbackQuery): –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
    """
    chat_id = call.message.chat.id
    _, playlist_name, track_id = call.data.split(':', 2)

    # –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–µ–∫ –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
    music_files = [f for f in os.listdir('downloads') if f.endswith(('.mp3', '.wav'))]
    track = next((f for f in music_files if hashlib.md5(f.encode()).hexdigest()[:10] == track_id), None)

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç—Ä–µ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —Ñ–∞–π–ª–æ–≤
    if not track:
        bot.answer_callback_query(call.id, "‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user_playlists = get_user_playlists(chat_id)

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–æ—Å—Ç—É–ø –∫ –ø–ª–µ–π–ª–∏—Å—Ç—É –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏
    if playlist_name not in user_playlists:
        bot.answer_callback_query(call.id, "‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user_playlists[playlist_name].append(track)
    update_user_playlists(chat_id, user_playlists)
    bot.answer_callback_query(call.id, f"‚úÖ –¢—Ä–µ–∫ '{track}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–µ–π–ª–∏—Å—Ç '{playlist_name}'.")
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–º
    user_playlists = get_user_playlists(call.message.chat.id)
    music_files = [f for f in os.listdir('downloads') if f.endswith(('.mp3', '.wav'))]
    markup = telebot.types.InlineKeyboardMarkup()
    for track in music_files:
        track_id = hashlib.md5(track.encode()).hexdigest()[:10]
        if track in user_playlists.get(playlist_name, []):
            button = telebot.types.InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {track}", callback_data=f'remove:{playlist_name}:{track_id}')
        else:
            button = telebot.types.InlineKeyboardButton(f"‚ûï –î–æ–±–∞–≤–∏—Ç—å {track}", callback_data=f'add:{playlist_name}:{track_id}')
        markup.add(button)

    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    handle_manage_playlist(call)  # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞

@bot.callback_query_handler(func=lambda call: call.data.startswith('remove:'))
def handle_remove_track(call):
    """
    –£–¥–∞–ª—è–µ—Ç —Ç—Ä–µ–∫ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞.

    Args:
        call (telebot.types.CallbackQuery): –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
    """
    chat_id = call.message.chat.id
    _, playlist_name, track_id = call.data.split(':', 2)

    # –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–µ–∫ –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
    music_files = [f for f in os.listdir('downloads') if f.endswith(('.mp3', '.wav'))]
    track = next((f for f in music_files if hashlib.md5(f.encode()).hexdigest()[:10] == track_id), None)

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç—Ä–µ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —Ñ–∞–π–ª–æ–≤
    if not track:
        bot.answer_callback_query(call.id, "‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user_playlists = get_user_playlists(chat_id)

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–æ—Å—Ç—É–ø –∫ –ø–ª–µ–π–ª–∏—Å—Ç—É –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏
    if playlist_name not in user_playlists:
        bot.answer_callback_query(call.id, "‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–µ–∫–∞ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ
    if track in user_playlists.get(playlist_name, []):
        user_playlists[playlist_name].remove(track)
        update_user_playlists(chat_id, user_playlists)
        bot.answer_callback_query(call.id, f"‚ùå –¢—Ä–µ–∫ '{track}' —É–¥–∞–ª–µ–Ω –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ '{playlist_name}'.")
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–º
        user_playlists = get_user_playlists(call.message.chat.id)
        music_files = [f for f in os.listdir('downloads') if f.endswith(('.mp3', '.wav'))]
        markup = telebot.types.InlineKeyboardMarkup()
        for track in music_files:
            track_id = hashlib.md5(track.encode()).hexdigest()[:10]
            if track in user_playlists.get(playlist_name, []):
                button = telebot.types.InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {track}", callback_data=f'remove:{playlist_name}:{track_id}')
            else:
                button = telebot.types.InlineKeyboardButton(f"‚ûï –î–æ–±–∞–≤–∏—Ç—å {track}", callback_data=f'add:{playlist_name}:{track_id}')
            markup.add(button)

        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        handle_manage_playlist(call)  # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
    else:
        bot.answer_callback_query(call.id, "‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('play_playlist:'))
def handle_play_playlist(call):
    """
    –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –≤—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞.

    Args:
        call (telebot.types.CallbackQuery): –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
    """
    chat_id = call.message.chat.id
    playlist_name = call.data.split(':', 1)[1]
    user_playlists = get_user_playlists(chat_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
    normalized_playlists = {name.strip().lower(): name for name in user_playlists.keys()}
    normalized_name = playlist_name.strip().lower()

    if not user_playlists:
        bot.answer_callback_query(call.id, "‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
    playlist_name = normalized_playlists[normalized_name]

    if not user_playlists[playlist_name]:
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, f"‚ùå –ü–ª–µ–π–ª–∏—Å—Ç '{playlist_name}' –ø—É—Å—Ç.")
        return

    for track in user_playlists[playlist_name]:
        track_path = os.path.join('downloads', track)
        if os.path.exists(track_path):
            with open(track_path, 'rb') as music_file:
                bot.send_audio(chat_id, music_file)
        else:
            bot.send_message(chat_id, f"‚ùå –¢—Ä–µ–∫ '{track}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ 'downloads'.")

    bot.answer_callback_query(call.id, f"‚úÖ –í—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ '{playlist_name}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

@bot.message_handler(commands=['help'])
def send_help(message):
    """
    –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /help.

    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.
    
    Args:
        message (telebot.types.Message): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –±–æ—Ç–∞.
    """
    bot.send_message(message.chat.id, message)  # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é —è–∫–æ—é –≤–æ–ª–æ–¥—ñ—î –±–æ—Ç


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    bot.polling()