import telebot
import os
import hashlib
import json
import logging

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

def calculate_file_hash(file_content):
    """
    –û–±—á–∏—Å–ª—é—î SHA-256 —Ö–µ—à –¥–ª—è –≤–º—ñ—Å—Ç—É —Ñ–∞–π–ª—É.

    Args:
        file_content (bytes): –í–º—ñ—Å—Ç —Ñ–∞–π–ª—É —É –±–∞–π—Ç–∞—Ö.

    Returns:
        str: SHA-256 —Ö–µ—à —É –≤–∏–≥–ª—è–¥—ñ —à—ñ—Å—Ç–Ω–∞–¥—Ü—è—Ç–∫–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞.
    """
    sha256 = hashlib.sha256()
    sha256.update(file_content)
    return sha256.hexdigest()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –±–æ—Ç–∞
bot = telebot.TeleBot('8064955635:AAHe78CWompJ-CQxoIOUQ_4OryhjeIkd6vw')

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_data = {}

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ö–µ—à—ñ–≤ —Ñ–∞–π–ª—ñ–≤
file_hashes = {}

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤
playlists = []

# –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤
PLAYLISTS_FILE = 'playlists.json'

# –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –º—É–∑–∏–∫–∏
MUSIC_FILE = 'music.json'

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º—É–∑–∏–∫–∏ –∑ —Ñ–∞–π–ª—É
def load_music():
    try:
        with open(MUSIC_FILE, 'r', encoding='utf-8') as file:
            return json.load(file)
    except FileNotFoundError:
        logging.warning("–§–∞–π–ª music.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–æ—Ä–æ–∂–Ω—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º—É–∑–∏–∫–∏.")
        return {}
    except json.JSONDecodeError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON: {e}. –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–æ—Ä–æ–∂–Ω—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º—É–∑–∏–∫–∏.")
        return {}

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º—É–∑–∏–∫–∏ —É —Ñ–∞–π–ª
def save_music(music_data):
    try:
        with open(MUSIC_FILE, 'w', encoding='utf-8') as file:
            json.dump(music_data, file, ensure_ascii=False, indent=4)
        logging.debug("–ú—É–∑–∏–∫–∞ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É —Ñ–∞–π–ª.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –º—É–∑–∏–∫–∏: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –º—É–∑–∏–∫–∏
music_data = load_music()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤ –∑ —Ñ–∞–π–ª—É
def load_playlists():
    global playlists
    try:
        with open(PLAYLISTS_FILE, 'r', encoding='utf-8') as file:
            playlists = json.load(file)
            logging.debug("–ü–ª–µ–π–ª–∏—Å—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –∑ —Ñ–∞–π–ª—É.")
    except FileNotFoundError:
        playlists = []
        logging.warning("–§–∞–π–ª playlists.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–æ—Ä–æ–∂–Ω—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤.")
    except json.JSONDecodeError as e:
        playlists = []
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON: {e}. –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–æ—Ä–æ–∂–Ω—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤.")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤ —É —Ñ–∞–π–ª
def save_playlists():
    """
    –ó–±–µ—Ä—ñ–≥–∞—î –ø–ª–µ–π–ª–∏—Å—Ç–∏ —É —Ñ–∞–π–ª.
    """
    try:
        with open(PLAYLISTS_FILE, 'w', encoding='utf-8') as file:
            json.dump(playlists, file, ensure_ascii=False, indent=4)
        logging.debug("–ü–ª–µ–π–ª–∏—Å—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —É —Ñ–∞–π–ª.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def get_user_playlists(user_id):
    for user_data in playlists:
        if user_data["user_id"] == user_id:
            return user_data["playlists"]
    return {}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def update_user_playlists(user_id, updated_playlists):
    for user_data in playlists:
        if user_data["user_id"] == user_id:
            user_data["playlists"] = updated_playlists
            save_playlists()
            return
    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –¥–æ–¥–∞—î–º–æ –Ω–æ–≤–æ–≥–æ
    playlists.append({"user_id": user_id, "playlists": updated_playlists})
    save_playlists()

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–ª–µ–π–ª–∏—Å—Ç–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
load_playlists()

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """
    –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /start.

    –í—ñ—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–¥—É–ª—ñ–≤.

    Args:
        message (telebot.types.Message): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è adding_music —É False
    if message.chat.id in user_data:
        user_data[message.chat.id]['adding_music'] = False

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    markup = telebot.types.InlineKeyboardMarkup()
    music_button = telebot.types.InlineKeyboardButton("üéµ–ü–æ—á–∞—Ç–∏", callback_data='music')
    markup.row(music_button)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.send_message(
        message.chat.id,
        "üéµ <b>–ü—Ä–∏–≤—ñ—Ç!</b> –Ø ‚Äî —Ç–≤—ñ–π –º—É–∑–∏—á–Ω–∏–π –±–æ—Ç! üé∂\n\n"
        "–Ø –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ —Å–ª—É—Ö–∞—Ç–∏ —É–ª—é–±–ª–µ–Ω—É –º—É–∑–∏–∫—É, —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∏ —Ç–∞ –Ω–∞—Å–æ–ª–æ–¥–∂—É–≤–∞—Ç–∏—Å—è –∑–≤—É–∫–æ–º! üî•\n\n"
        "<i>–î–∞–≤–∞–π —Å–ª—É—Ö–∞—Ç–∏ –º—É–∑–∏–∫—É —Ä–∞–∑–æ–º!</i> üéß‚ú®",
        reply_markup=markup,
        parse_mode='HTML'
    )

@bot.callback_query_handler(func=lambda call: call.data == 'music')
def music_menu(call):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –º–æ–¥—É–ª—è "–ú—É–∑–∏–∫–∞".

    –í–∏–¥–∞–ª—è—î –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –º–µ–Ω—é –∑ –æ–ø—Ü—ñ—è–º–∏ –¥–ª—è –º—É–∑–∏–∫–∏, –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤ —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤.

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è adding_music —É False
    if call.message.chat.id in user_data:
        user_data[call.message.chat.id]['adding_music'] = False

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.delete_message(call.message.chat.id, call.message.message_id)

    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω—é
    markup = telebot.types.InlineKeyboardMarkup()
    music_button = telebot.types.InlineKeyboardButton("üé∂–ü—Ä–æ—Å–ª—É—Ö–∞—Ç–∏ –º—É–∑–∏–∫—É", callback_data='music_option')
    playlist_button = telebot.types.InlineKeyboardButton("üìÑ–ü–ª–µ–π–ª–∏—Å—Ç–∏", callback_data='playlist')
    tools_button = telebot.types.InlineKeyboardButton("‚öôÔ∏è–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏", callback_data='tools')
    add_music_button = telebot.types.InlineKeyboardButton("‚ûï–î–æ–¥–∞—Ç–∏ –º—É–∑–∏–∫—É", callback_data='add_music')
    markup.row(music_button, playlist_button)
    markup.row(tools_button, add_music_button)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.send_message(
        call.message.chat.id,
        "<b>üéµ –û–ø–∏—Å –∫–Ω–æ–ø–æ–∫:</b> \n\n"
        "<b>üé∂–ü—Ä–æ—Å–ª—É—Ö–∞—Ç–∏ –º—É–∑–∏–∫—É</b> ‚Äì –≤–∏–±—ñ—Ä —ñ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–µ–∫—ñ–≤.\n\n"
        "<b>üìÑ–ü–ª–µ–π–ª–∏—Å—Ç–∏</b> ‚Äì –ø–µ—Ä–µ–≥–ª—è–¥ —Ç–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏.\n\n"
        "<b>‚öôÔ∏è–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏</b> ‚Äì –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º—É–∑–∏–∫–∏ —á–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤.\n\n"
        "<b>‚ûï–î–æ–¥–∞—Ç–∏ –º—É–∑–∏–∫—É</b> ‚Äì –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ç—Ä–µ–∫—ñ–≤.",
        reply_markup=markup,
        parse_mode='HTML'
    )

@bot.callback_query_handler(func=lambda call: call.data == 'add_music')
def handle_add_music(call):
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–î–æ–¥–∞—Ç–∏ –º—É–∑–∏–∫—É".

    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–æ—Ö–∞–Ω–Ω—è–º –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞—É–¥—ñ–æ—Ñ–∞–π–ª.

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "üéµ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –∑ –º—É–∑–∏–∫–æ—é –≤ —Ü–µ–π —á–∞—Ç, —â–æ–± –¥–æ–¥–∞—Ç–∏ –π–æ–≥–æ.")
    user_data[call.message.chat.id] = {'adding_music': True}

@bot.message_handler(content_types=['audio'])
def save_music_file(message):
    """
    –û–±—Ä–æ–±–ª—è—î –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞—É–¥—ñ–æ—Ñ–∞–π–ª—É –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

    –ó–±–µ—Ä—ñ–≥–∞—î ID —Ñ–∞–π–ª—É —É JSON —Ñ–∞–π–ª, —è–∫—â–æ —Ç–∞–∫–æ–≥–æ ID —â–µ –Ω–µ–º–∞—î.
    –Ø–∫—â–æ ID –≤–∂–µ —ñ—Å–Ω—É—î, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –¥–æ–¥–∞—î –∫–Ω–æ–ø–∫—É "–í–∏–π—Ç–∏".

    Args:
        message (telebot.types.Message): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞—É–¥—ñ–æ—Ñ–∞–π–ª–æ–º.
    """
    user_state = user_data.get(message.chat.id, {})
    if not user_state.get('adding_music', False):
        bot.send_message(message.chat.id, "üéµ –í–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –º—É–∑–∏–∫–∏. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚ûï–î–æ–¥–∞—Ç–∏ –º—É–∑–∏–∫—É' —É –º–µ–Ω—é.")
        return

    file_id = message.audio.file_id

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ ID –≤–∂–µ —ñ—Å–Ω—É—î
    if file_id in music_data:
        bot.send_message(message.chat.id, "üéµ –¶–µ–π —Ñ–∞–π–ª –≤–∂–µ —ñ—Å–Ω—É—î —É –≤–∞—à—ñ–π –±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ.")
    else:
        music_data[file_id] = {
            "file_name": message.audio.file_name or f"{file_id}.mp3",
            "user_id": message.chat.id
        }
        save_music(music_data)
        bot.send_message(message.chat.id, "üéµ –§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–æ—ó –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏!")

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–í–∏–π—Ç–∏"
    markup = telebot.types.InlineKeyboardMarkup()
    exit_button = telebot.types.InlineKeyboardButton("üö™–í–∏–π—Ç–∏", callback_data='music')
    markup.add(exit_button)

    bot.send_message(message.chat.id, "üéµ –í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ –æ–¥–∏–Ω —Ñ–∞–π–ª –∞–±–æ –≤–∏–π—Ç–∏ –∑ —Ä–µ–∂–∏–º—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è.", reply_markup=markup)

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('adding_music', False))
def add_music_from_folder(message):
    """
    –í–∏–¥–∞–ª–µ–Ω–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –¥–æ–¥–∞–≤–∞–Ω–Ω—è –º—É–∑–∏–∫–∏ –∑ –ø–∞–ø–∫–∏, –æ—Å–∫—ñ–ª—å–∫–∏ —Ç–µ–ø–µ—Ä –º—É–∑–∏–∫–∞ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —É JSON.
    """
    bot.send_message(message.chat.id, "‚ùå –î–æ–¥–∞–≤–∞–Ω–Ω—è –º—É–∑–∏–∫–∏ –∑ –ø–∞–ø–∫–∏ –±—ñ–ª—å—à–µ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.")

@bot.callback_query_handler(func=lambda call: call.data == 'music_option')
def handle_music_option(call):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –æ–ø—Ü—ñ—ó "–ü—Ä–æ—Å–ª—É—Ö–∞—Ç–∏ –º—É–∑–∏–∫—É".

    –í–∏–¥–∞–ª—è—î –ø–æ–ø–µ—Ä–µ–¥–Ω—î –º–µ–Ω—é "music" —ñ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ—ó –º—É–∑–∏–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∞ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è.

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    chat_id = call.message.chat.id

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –º–µ–Ω—é
    bot.delete_message(chat_id, call.message.message_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –º—É–∑–∏–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_tracks = [file_id for file_id, info in music_data.items() if info["user_id"] == chat_id]

    if not user_tracks:
        bot.send_message(chat_id, "üéµ –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –º—É–∑–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤. –î–æ–¥–∞–π—Ç–µ —ó—Ö —á–µ—Ä–µ–∑ –º–µ–Ω—é '‚ûï–î–æ–¥–∞—Ç–∏ –º—É–∑–∏–∫—É'.")
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —ñ–Ω–¥–µ–∫—Å —Ç—Ä–µ–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if chat_id not in user_data:
        user_data[chat_id] = {}
    user_data[chat_id]['current_track_index'] = 0

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–µ—Ä—à–∏–π —Ç—Ä–µ–∫ —Ä–∞–∑–æ–º —ñ–∑ –∫–Ω–æ–ø–∫–∞–º–∏
    current_track_id = user_tracks[user_data[chat_id]['current_track_index']]
    markup = telebot.types.InlineKeyboardMarkup()
    prev_button = telebot.types.InlineKeyboardButton("‚èÆÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", callback_data='prev_track')
    next_button = telebot.types.InlineKeyboardButton("‚è≠Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞", callback_data='next_track')
    back_button = telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='music')
    markup.row(prev_button, next_button)
    markup.add(back_button)

    bot.send_audio(chat_id, current_track_id, caption="üéµ –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—É–∑–∏–∫–∏:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ['prev_track', 'next_track'])
def handle_track_navigation(call):
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –º—ñ–∂ —Ç—Ä–µ–∫–∞–º–∏ ("–ü–æ–ø–µ—Ä–µ–¥–Ω—è" —Ç–∞ "–ù–∞—Å—Ç—É–ø–Ω–∞").

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    chat_id = call.message.chat.id
    user_tracks = [file_id for file_id, info in music_data.items() if info["user_id"] == chat_id]

    if not user_tracks:
        bot.answer_callback_query(call.id, "üéµ –£ –≤–∞—Å –Ω–µ–º–∞—î –º—É–∑–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —ñ–Ω–¥–µ–∫—Å —Ç—Ä–µ–∫—É
    current_index = user_data[chat_id].get('current_track_index', 0)

    # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω–¥–µ–∫—Å –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫–Ω–æ–ø–∫–∏
    if call.data == 'prev_track':
        current_index = (current_index - 1) % len(user_tracks)
    elif call.data == 'next_track':
        current_index = (current_index + 1) % len(user_tracks)

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —ñ–Ω–¥–µ–∫—Å
    user_data[chat_id]['current_track_index'] = current_index

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–∏–π —Ç—Ä–µ–∫ —Ä–∞–∑–æ–º —ñ–∑ –∫–Ω–æ–ø–∫–∞–º–∏
    current_track_id = user_tracks[current_index]
    markup = telebot.types.InlineKeyboardMarkup()
    prev_button = telebot.types.InlineKeyboardButton("‚èÆÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", callback_data='prev_track')
    next_button = telebot.types.InlineKeyboardButton("‚è≠Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞", callback_data='next_track')
    back_button = telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='music')
    markup.row(prev_button, next_button)
    markup.add(back_button)

    bot.edit_message_media(
        chat_id=chat_id,
        message_id=call.message.message_id,
        media=telebot.types.InputMediaAudio(media=current_track_id, caption="üéµ –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—É–∑–∏–∫–∏:"),
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == 'playlist')
def handle_playlist_menu(call):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –º–æ–¥—É–ª—è "–ü–ª–µ–π–ª–∏—Å—Ç–∏".

    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –º–µ–Ω—é –∑ –æ–ø—Ü—ñ—è–º–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏.

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    chat_id = call.message.chat.id

    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω—é
    markup = telebot.types.InlineKeyboardMarkup()
    view_playlists_button = telebot.types.InlineKeyboardButton("üìÇ–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∏", callback_data='view_playlists')
    create_playlist_button = telebot.types.InlineKeyboardButton("‚ûï–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç", callback_data='create_playlist')
    edit_playlist_button = telebot.types.InlineKeyboardButton("‚úèÔ∏è–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç", callback_data='edit_playlist')
    markup.row(create_playlist_button, edit_playlist_button)
    markup.row(view_playlists_button)

    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=call.message.message_id,
        text="üìÑ <b>–ú–µ–Ω—é –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤:</b>\n\n"
             "‚ûï–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç ‚Äì —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞.\n"
             "‚úèÔ∏è–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç ‚Äì –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ç—Ä–µ–∫–∞–º–∏ —É –ø–ª–µ–π–ª–∏—Å—Ç—ñ.\n"
             "üìÇ–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∏ ‚Äì –ø–µ—Ä–µ–≥–ª—è–¥ —Ç–∞ –≤–∏–±—ñ—Ä —ñ—Å–Ω—É—é—á–∏—Ö –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤.",
        reply_markup=markup,
        parse_mode='HTML'
    )

@bot.callback_query_handler(func=lambda call: call.data == 'edit_playlist')
def handle_edit_playlist_menu(call):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    chat_id = call.message.chat.id
    user_playlists = get_user_playlists(chat_id)

    if not user_playlists:
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, "üìÇ –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è. –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —á–µ—Ä–µ–∑ –º–µ–Ω—é –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤.")
        return

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
    markup = telebot.types.InlineKeyboardMarkup()
    for playlist_name in user_playlists:
        edit_button = telebot.types.InlineKeyboardButton(playlist_name, callback_data=f'manage_playlist:{playlist_name}')
        markup.add(edit_button)

    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=call.message.message_id,
        text="‚úèÔ∏è <b>–í–∏–±–µ—Ä—ñ—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:</b>",
        reply_markup=markup,
        parse_mode='HTML'
    )

@bot.callback_query_handler(func=lambda call: call.data == 'create_playlist')
def handle_create_playlist(call):
    """
    –û–±—Ä–æ–±–ª—è—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞.

    –ó–∞–ø–∏—Ç—É—î —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞.

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "üìÑ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞:")

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
    user_data[call.message.chat.id] = {'creating_playlist': True}

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('creating_playlist', False))
def save_playlist_name(message):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ —Ç–∞ –¥–æ–¥–∞—î –π–æ–≥–æ –¥–æ —Å–ø–∏—Å–∫—É –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

    Args:
        message (telebot.types.Message): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –Ω–∞–∑–≤–æ—é –ø–ª–µ–π–ª–∏—Å—Ç–∞.
    """
    chat_id = message.chat.id
    playlist_name = message.text.strip()
    user_playlists = get_user_playlists(chat_id)

    if (playlist_name in user_playlists):
        bot.send_message(chat_id, "‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É.")
    else:
        user_playlists[playlist_name] = []
        update_user_playlists(chat_id, user_playlists)
        logging.debug(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –ø–ª–µ–π–ª–∏—Å—Ç: {playlist_name} –¥–ª—è —á–∞—Ç—É {chat_id}.")
        bot.send_message(chat_id, f"‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç '{playlist_name}' —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")

    # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
    user_data[chat_id]['creating_playlist'] = False

@bot.callback_query_handler(func=lambda call: call.data == 'view_playlists')
def handle_view_playlists(call):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    chat_id = call.message.chat.id
    user_playlists = get_user_playlists(chat_id)

    if not user_playlists:
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, "üìÇ –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤. –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —á–µ—Ä–µ–∑ –º–µ–Ω—é –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤.")
        return

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
    markup = telebot.types.InlineKeyboardMarkup()
    for playlist_name in user_playlists:
        playlist_button = telebot.types.InlineKeyboardButton(playlist_name, callback_data=f'open_playlist:{playlist_name}')
        markup.add(playlist_button)

    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=call.message.message_id,
        text="üìÇ <b>–í–∞—à—ñ –ø–ª–µ–π–ª–∏—Å—Ç–∏:</b>",
        reply_markup=markup,
        parse_mode='HTML'
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('open_playlist:'))
def handle_open_playlist(call):
    """
    –í—ñ–¥–∫—Ä–∏–≤–∞—î –≤–∏–±—Ä–∞–Ω–∏–π –ø–ª–µ–π–ª–∏—Å—Ç —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –≤—Å—ñ —Ç—Ä–µ–∫–∏ –∑ –Ω—å–æ–≥–æ.

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    chat_id = call.message.chat.id
    playlist_name = call.data.split(':', 1)[1]
    user_playlists = get_user_playlists(chat_id)

    if playlist_name not in user_playlists:
        bot.answer_callback_query(call.id, "‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    if playlist_name not in user_playlists or not user_playlists[playlist_name]:
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, f"‚ùå –ü–ª–µ–π–ª–∏—Å—Ç '{playlist_name}' –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    tracks = user_playlists[playlist_name]
    if not tracks:
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, f"üìÇ –ü–ª–µ–π–ª–∏—Å—Ç '{playlist_name}' –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—Å—ñ —Ç—Ä–µ–∫–∏ –∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞
    for track in tracks:
        if track in music_data:
            bot.send_audio(chat_id, track)
        else:
            bot.send_message(chat_id, f"‚ùå –¢—Ä–µ–∫ '{track}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ.")

    bot.answer_callback_query(call.id, f"‚úÖ –í—Å—ñ —Ç—Ä–µ–∫–∏ –∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ '{playlist_name}' –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('manage_playlist:'))
def handle_manage_playlist(call):
    """
    –û–±—Ä–æ–±–ª—è—î –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ç—Ä–µ–∫–∞–º–∏ —É –ø–ª–µ–π–ª–∏—Å—Ç—ñ (–¥–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è).

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    chat_id = call.message.chat.id
    playlist_name = call.data.split(':', 1)[1]
    user_playlists = get_user_playlists(chat_id)

    # –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—è, —â–æ –ø–ª–µ–π–ª–∏—Å—Ç —ñ—Å–Ω—É—î
    if (playlist_name not in user_playlists):
        bot.answer_callback_query(call.id, "‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç—Ä–µ–∫—ñ–≤
    available_tracks = [file_id for file_id, info in music_data.items() if info["user_id"] == chat_id]
    if not available_tracks:
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, "üéµ –ú—É–∑–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç—Ä–µ–∫—ñ–≤
    markup = telebot.types.InlineKeyboardMarkup()
    for track in available_tracks:
        if track in user_playlists[playlist_name]:
            button = telebot.types.InlineKeyboardButton(f"‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ {music_data[track]['file_name']}", callback_data=f'remove:{playlist_name}:{track}')
        else:
            button = telebot.types.InlineKeyboardButton(f"‚ûï –î–æ–¥–∞—Ç–∏ {music_data[track]['file_name']}", callback_data=f'add:{playlist_name}:{track}')
        markup.add(button)

    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –º–µ–Ω—é
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=call.message.message_id,
        text=f"üéµ –ö–µ—Ä—É–≤–∞–Ω–Ω—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–º '{playlist_name}':",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('add:'))
def handle_add_track(call):
    """
    –î–æ–¥–∞—î —Ç—Ä–µ–∫ –¥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞.

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    chat_id = call.message.chat.id
    _, playlist_name, track_id = call.data.split(':', 2)

    # –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—è, —â–æ —Ç—Ä–µ–∫ —ñ—Å–Ω—É—î —É —Å–ø–∏—Å–∫—É —Ñ–∞–π–ª—ñ–≤
    if track_id not in music_data or music_data[track_id]["user_id"] != chat_id:
        bot.answer_callback_query(call.id, "‚ùå –¢—Ä–µ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    user_playlists = get_user_playlists(chat_id)

    # –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—è, —â–æ –¥–æ—Å—Ç—É–ø –¥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –ª–∏—à–µ –∑–∞ –π–æ–≥–æ –Ω–∞–∑–≤–æ—é
    if playlist_name not in user_playlists:
        bot.answer_callback_query(call.id, "‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    user_playlists[playlist_name].append(track_id)
    update_user_playlists(chat_id, user_playlists)
    bot.answer_callback_query(call.id, f"‚úÖ –¢—Ä–µ–∫ '{music_data[track_id]['file_name']}' –¥–æ–¥–∞–Ω–æ –¥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ '{playlist_name}'.")
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–º
    user_playlists = get_user_playlists(call.message.chat.id)
    available_tracks = [file_id for file_id, info in music_data.items() if info["user_id"] == call.message.chat.id]
    markup = telebot.types.InlineKeyboardMarkup()
    for track in available_tracks:
        if track in user_playlists.get(playlist_name, []):
            button = telebot.types.InlineKeyboardButton(f"‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ {music_data[track]['file_name']}", callback_data=f'remove:{playlist_name}:{track}')
        else:
            button = telebot.types.InlineKeyboardButton(f"‚ûï –î–æ–¥–∞—Ç–∏ {music_data[track]['file_name']}", callback_data=f'add:{playlist_name}:{track}')
        markup.add(button)

    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)  # –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏
    handle_manage_playlist(call)  # –û–Ω–æ–≤–ª—é—î–º–æ –º–µ–Ω—é –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–µ–∫—É

@bot.callback_query_handler(func=lambda call: call.data.startswith('remove:'))
def handle_remove_track(call):
    """
    –í–∏–¥–∞–ª—è—î —Ç—Ä–µ–∫ –∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞.

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    chat_id = call.message.chat.id
    _, playlist_name, track_id = call.data.split(':', 2)

    # –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—è, —â–æ —Ç—Ä–µ–∫ —ñ—Å–Ω—É—î —É —Å–ø–∏—Å–∫—É —Ñ–∞–π–ª—ñ–≤
    if track_id not in music_data or music_data[track_id]["user_id"] != chat_id:
        bot.answer_callback_query(call.id, "‚ùå –¢—Ä–µ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    user_playlists = get_user_playlists(chat_id)

    # –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—è, —â–æ –¥–æ—Å—Ç—É–ø –¥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –ª–∏—à–µ –∑–∞ –π–æ–≥–æ –Ω–∞–∑–≤–æ—é
    if playlist_name not in user_playlists:
        bot.answer_callback_query(call.id, "‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç—Ä–µ–∫—É —É –ø–ª–µ–π–ª–∏—Å—Ç—ñ
    if track_id in user_playlists.get(playlist_name, []):
        user_playlists[playlist_name].remove(track_id)
        update_user_playlists(chat_id, user_playlists)
        bot.answer_callback_query(call.id, f"‚ùå –¢—Ä–µ–∫ '{music_data[track_id]['file_name']}' –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ '{playlist_name}'.")
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–º
        user_playlists = get_user_playlists(call.message.chat.id)
        available_tracks = [file_id for file_id, info in music_data.items() if info["user_id"] == call.message.chat.id]
        markup = telebot.types.InlineKeyboardMarkup()
        for track in available_tracks:
            if track in user_playlists.get(playlist_name, []):
                button = telebot.types.InlineKeyboardButton(f"‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ {music_data[track]['file_name']}", callback_data=f'remove:{playlist_name}:{track}')
            else:
                button = telebot.types.InlineKeyboardButton(f"‚ûï –î–æ–¥–∞—Ç–∏ {music_data[track]['file_name']}", callback_data=f'add:{playlist_name}:{track}')
            markup.add(button)

        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)  # –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏
        handle_manage_playlist(call)  # –û–Ω–æ–≤–ª—é—î–º–æ –º–µ–Ω—é –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç—Ä–µ–∫—É
    else:
        bot.answer_callback_query(call.id, "‚ùå –¢—Ä–µ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –ø–ª–µ–π–ª–∏—Å—Ç—ñ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('play_playlist:'))
def handle_play_playlist(call):
    """
    –í—ñ–¥—Ç–≤–æ—Ä—é—î –≤—Å—ñ —Ç—Ä–µ–∫–∏ –∑ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞.

    Args:
        call (telebot.types.CallbackQuery): –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É.
    """
    chat_id = call.message.chat.id
    playlist_name = call.data.split(':', 1)[1]
    user_playlists = get_user_playlists(chat_id)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ä–µ–≥—ñ—Å—Ç—Ä—É —Ç–∞ –ø—Ä–æ–±—ñ–ª—ñ–≤
    normalized_playlists = {name.strip().lower(): name for name in user_playlists.keys()}
    normalized_name = playlist_name.strip().lower()

    if not user_playlists:
        bot.answer_callback_query(call.id, "‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É –Ω–∞–∑–≤—É –ø–ª–µ–π–ª–∏—Å—Ç–∞
    playlist_name = normalized_playlists[normalized_name]

    if not user_playlists[playlist_name]:
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, f"‚ùå –ü–ª–µ–π–ª–∏—Å—Ç '{playlist_name}' –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    for track in user_playlists[playlist_name]:
        if track in music_data:
            bot.send_audio(chat_id, track)
        else:
            bot.send_message(chat_id, f"‚ùå –¢—Ä–µ–∫ '{track}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ.")

    bot.answer_callback_query(call.id, f"‚úÖ –í—Å—ñ —Ç—Ä–µ–∫–∏ –∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ '{playlist_name}' –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ.")

@bot.message_handler(commands=['help'])
def send_help(message):
    """
    –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /help.

    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.
    
    Args:
        message (telebot.types.Message): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –±–æ—Ç–∞.
    """
    bot.send_message(message.chat.id, message)  # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é —è–∫–æ—é –≤–æ–ª–æ–¥—ñ—î –±–æ—Ç


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    bot.polling()